═══════════════════════════════════════════════════════════════════════════════
                    CLAUDE PROCESS MESSAGE CRIBSHEET
═══════════════════════════════════════════════════════════════════════════════

Standard messages for each stage of the development process:
- PLAN STAGE: Use after explaining task requirements
- ITERATION: Use when issues need addressing
- REVIEW STAGE: Use after work/iteration is complete
- RECOVERY: Use when context auto-compact occurs

-------------------- PLAN STAGE - Task Initiation -----------------------

Before you begin, Read the guidelines at 

/mnt/c/Users/tdeme/Local Sites/faux-stained-glass-panes/app/public/wp-content/plugins/.claude/Coding_Guidelines_Snapshot.txt

This document contains a process overview detailing behavioral requirements for the three stages that all tasks will follow: the Plan Stage, the Work Stage and the Review Stage.  Again, these are behavioral requirements; this is not reference material.  Read the document in its entirety before beginning any subsequent steps.   All work done must remain in accordance with these behavioral requirements.

Carefully review the details of the task that the user is asking for help with focusing on the WHY the work is needed in the larger context of the plugin.   

If the user uploads an image, look for the most recent image in this directory: /mnt/c/Users/tdeme/Documents/VSCode_Images_Repo/
If the user did not mention an image upload, skip this step.

Refer to the working-task-template to ensure you have a full practical understanding of the goals and constraints of the task.

/mnt/c/Users/tdeme/Local Sites/faux-stained-glass-panes/app/public/wp-content/plugins/.claude/working-task-planning-template.md.

When you have completed your preparation, post your working understanding and your plan concisely in the chat.  At that point, collaborate with the user to finalize any questions that you may have had or that the user has.  Do not code until explicitly instructed to do so by the user.

-------------------- ITERATION REQUIRED MESSAGE -----------------------

Issues have been identified that need to be addressed.
Let's collaborate on the best approach to fix these while staying within our established guidelines.

Please keep your responses brief and practical to facilitate rapid communication. We'll refine the plan together before you begin any coding work.


-------------------- REVIEW STAGE - Work Complete -----------------------

Please confirm that your code updates do not violate any of the primary SiP coding rules:

□ No defensive code added to prevent errors (fixed root causes instead)
□ No redundant storage mechanisms (single source of truth)      
□ No setTimeout for waiting (only for intentional delays)       
□ No try-catch for errors that shouldn't exist
□ No function_exists/class_exists/isset defensive checks        
□ Made zero assumptions (verified all data structures and field names)
□ Code would pass senior developer review for simplicity and clarity
□ No backward compatibility code or legacy remnants preserved

Once code is confirmed compliant, please review the documentation to ensure accuracy:

**PREPARATION**
□ Re-read /mnt/c/Users/tdeme/Local Sites/faux-stained-glass-panes/app/public/wp-content/plugins/.claude/index.md
□ Identify which /guidelines/ files relate to your changes      

**ACCURACY CHECK**
□ Documentation reflects current code functionality (not past or future state)
□ All code references use correct file paths and line numbers
□ Message types, handler names, and API calls match implementation
□ No orphaned documentation for removed features

**CLARITY CHECK**
□ Would a new developer understand the WHY behind each design decision?
□ Are complex flows explained with diagrams first, prose second?
□ Do code examples show the essential pattern in <20 lines?     
□ Is each concept explained exactly once with cross-references elsewhere?

**CONSISTENCY CHECK**
□ Headers are concise and front-loaded (e.g., "Debug Configuration" not "How to Configure Debug")
□ Terminology is consistent throughout (picked one term per concept)
□ Documentation follows established SiP patterns for similar features
□ Maximum 3 heading levels (##, ###, ####)

**FINAL REVIEW**
□ No TODO lists, roadmaps, or troubleshooting sections
□ No duplication - used search to verify single source of truth
□ All cross-references work: `[See Section](#anchor)`
□ Documentation answers "why it exists" not "how we got here"

<!-- DOCUMENTATION RULES - See full guidelines at:
/mnt/c/Users/tdeme/Local Sites/faux-stained-glass-panes/app/public/wp-content/plugins/.claude/guidelines/sip-documentation-guidelines.md

Quick Reference:
1. NO FUTURE OR HISTORY - Current state only
2. ARCHITECTURAL WHY - Explain design decisions  
3. EXAMPLES OVER EXPLANATIONS - Show working code
4. DIAGRAM BEFORE PROSE - Visual first
5. CODE LIMITS - <50 lines per example
6. SINGLE SOURCE OF TRUTH - No duplication
7. STRUCTURED HIERARCHY - Clear organization
8. CONCISE HEADERS - Brief and descriptive
9. ACTIVE VOICE - Direct language
10. CONSISTENT TERMINOLOGY - Same terms throughout
-->

When complete, provide a commit message that:
□ Summarizes the functional change (not the documentation update)
□ Uses present tense ("Add" not "Added", "Fix" not "Fixed")     
□ Keeps first line under 50 characters
□ Includes blank line before extended description (if needed)


-------------------- RECOVERY - Context Auto-Compact ------------------------

You just went through a context auto-compact. This has critically compromised your context and you should proceed with extreme caution and the assumption that you are likely to make errors. Please make sure to double check existing documentation, code and confirm goals and methods before making code changes. I will attempt to help you rehydrate with the following data:

An overview and index of extensive documentation can be found here: /mnt/c/Users/tdeme/Local Sites/faux-stained-glass-panes/app/public/wp-content/plugins/.claude/index.md

You are expected to code based on these guidelines:

□ No defensive code added to prevent errors (fixed root causes instead)
□ No redundant storage mechanisms (single source of truth)
□ No setTimeout for waiting (only for intentional delays)
□ No try-catch for errors that shouldn't exist
□ No function_exists/class_exists/isset defensive checks
□ Made zero assumptions (verified all data structures and field names)
□ Code would pass senior developer review for simplicity and clarity
□ No backward compatibility code or legacy remnants preserved

To recover context:
1. Re-read the current working-task-planning file
2. Review recent file changes in the affected areas
3. Confirm current task status before proceeding