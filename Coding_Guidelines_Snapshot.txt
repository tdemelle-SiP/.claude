 
 -- PLANNING --

 Do not code without explicit direction to do so.  Do not make changes beyond those clearly stated in a request to change code made by the user.

 Images shared by the user will be uploaded here: /mnt/c/Users/tdeme/VSCode_Images_Repo/. If the user uploads an image, look for the most recent image in this directory.

 Before doing work, refer to the index.md file in the .claude folder and then make sure that you are familiar with any relevant utilities and standards outlined in the documentation.

 Always use the methods and standards in the sip plugin suite documentation outlined in the index.md file in the .claude folder  making sure to observe the established coding standards and to use shared functions and utilities in all cases where they have been established as the plugin suite standard. 
 
 If in the course of review or implementation you have ideas for additions or alternate approaches, stop what you're doing and mention them in a chat message so that we can discuss them, decide upon the best path forward and you can proceed with coding with explicit direction.
 
 -- WORKING --
 Keep code simple, clean and straightforward. Do not over-complicate, over-engineer or write overly abstract or overly defensive code.
 
When you are addressing code issues, always be aware when you may be reactively treating symptoms instead of understanding the larger code context at the root of the problem. Stop doing the former, which will invariably lead to unnecessary complexity and technical debt, and instead focus on the latter which will result in clean elegant code that embodies robust and sustainable patterns and standards that are scalable across the plugin suite.

When you are familiarizing yourself with code, read the code instead of searching for specific parts; understanding the full context that targetted searches may miss is critical.

When searching and replacing to update code, do not rely on context for your search string; check the actual code to ensure your search string is accurate.  Never use write to file to make code updates.
 
 Do not preserve legacy code.  Clean up all remnants of unused or deprecated code thoroughly.

 Do not create custom test tools or instructions.  Testing will take place in the actual code.
 
 -- REVIEWING --
 If you have implemented changes to the code, carefully review your changes and any code that may be affected by those changes to ensure all code adheres to the prevailing suite coding standard, and there is no legacy code or remnants of deprecated code.

 Upon completion, review the sip plugin suite documentation in the .claude folder and ensure that it is up to date, clear and complete and that it reflects both any changes or additions to code standards and addresses any issues that may have arisen in implementation from documentation clarity or organization.

 Code changes do not need to be recorded in a file.  Please simply provide a brief summary of changes suitable to be included in the source control commit message.

 -- TECHNICAL STANDARDS --
 
 Always verify that AJAX endpoints exist in the backend code before implementing frontend functionality that depends on them.
 
 Use fallback mechanisms when implementing functionality that depends on external data sources or network requests.
 
 For dashboard refresh after operations, prefer page reload over AJAX refresh unless you can implement the required additional endpoints and error handling.
 
 Understand that functions may serve dual purposes (initial load and refresh) before removing or modifying them.
 
 Use module-scope variables to store data that needs to persist across function calls within a JavaScript module.
 
 Always implement proper error handling with graceful degradation when possible.
 
 When reading plugin version data or checking plugin status, always use fresh data that bypasses WordPress caching. WordPress caches plugin data via get_plugins() which becomes stale after plugin updates. Use SiP_Plugins_Core::get_fresh_plugins() instead of get_plugins() for accurate, current plugin information.