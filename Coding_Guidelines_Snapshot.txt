═══════════════════════════════════════════════════════════════════════════════
                          SIP PLUGIN SUITE CODING GUIDELINES
═══════════════════════════════════════════════════════════════════════════════

## PRE-TASK MESSAGE

Here is the message I will send at the beginning of a task that should lead to this documentation.

----

Before you begin, 
It is absolutely critical that you read the guidelines at /mnt/c/Users/tdeme/Local
  Sites/faux-stained-glass-panes/app/public/wp-content/plugins/.claude/Coding_Guidelines_Snapshot.txt. These are behavioral requirements, not reference material.   The code you write must adhere to these behavioral requirements.

Then please review the documentation for the plugin suite at 

/mnt/c/Users/tdeme/Local
  Sites/faux-stained-glass-panes/app/public/wp-content/plugins/.claude/index.md
  
/mnt/c/Users/tdeme/Local
  Sites/faux-stained-glass-panes/app/public/wp-content/plugins/.claude/guidelines/sip-printify-manager-architecture.md

/mnt/c/Users/tdeme/Local
  Sites/faux-stained-glass-panes/app/public/wp-content/plugins/.claude/guidelines/sip-printify-manager-extension-widget.md
  
After looking over the documentation, create a Task Working File in /work/ following the template. Then look over the relevant code and respond in the chat with a summary of the task including WHY the work is being done and any questions you may have. State which documentation files you've identified as relevant to this specific task. Once we've discussed the correct approach, I'll ask you to make the necessary updates adhering to the documented guidelines and standards. The work step must conclude with completing the Work Checkpoint section of your working file to verify all planned tasks are complete.

Do not forget; you must code according to Coding_Guidelines_Snapshot.txt  Do not forget; No Task Agent Delegation.
----

## POST-TASK MESSAGE

Here is the message that I will send at the end of a task to ensure we are following through correctly

----
 Great! Can you please look over the code that you just updated and make sure it adheres to the guidelines /mnt/c/Users/tdeme/Local
  Sites/faux-stained-glass-panes/app/public/wp-content/plugins/.claude/Coding_Guidelines_Snapshot.txt?

And can you please look over the documentation files to make sure that they are accurate and reflect the current functioning of the code?   Please review the documentation from the perspective of a developer and ensure that if faced with understanding and working with the established standards, a developer could confidently refer to the documentation and come away with a complete clear understanding of how to work with the principles and patterns of the codebase.  Don't forget the rules...
<!-- DOCUMENTATION RULES:
1. ARCHITECTURAL WHY - Document WHY each component exists (constraints/requirements that necessitate it)
2. NO HISTORY - Current state only, not how we got here  
3. NO DUPLICATION - Each fact appears exactly once
4. EXAMPLES OVER EXPLANATIONS - Show, don't tell
5. UPDATE THE RIGHT SECTION - Check if info already exists before adding
   
Start by reviewing /mnt/c/Users/tdeme/Local
  Sites/faux-stained-glass-panes/app/public/wp-content/plugins/.claude/index.md to refresh yourself with the overall structure and the principles behind it.  Then Please make sure to check on related documentation in the /guidelines/ directory to ensure that relevant files reflect updated standards correctly where appropriate and don't retain any deprecated references.  If there were aspects of the code that were unclear to you as you worked, carefully adhering to the documentation guidelines, please update the documentation to reflect the patterns, principles and structures that were needed to correctly implement your solution.    When you're done, can you please give me a commit message to include when I submit the changes in source control?
----

═══════════════════════════════════════════════════════════════════════════════
                               PLANNING PROCESS
═══════════════════════════════════════════════════════════════════════════════

## PLANNING REQUIREMENTS

 Do not code without explicit direction to do so.  Do not make changes beyond those clearly stated in a request to change code made by the user.

 Images shared by the user will be uploaded here: /mnt/c/Users/tdeme/Documents/VSCode_Images_Repo/. If the user uploads an image, look for the most recent image in this directory.

## DOCUMENTATION COMPLIANCE PROCESS

Before doing work, you must:

1. **Read the index.md file** in the .claude folder to understand the documentation structure
2. **Review the Complete Documentation Assessment** section to identify which guidelines apply to your task
3. **Read ALL identified relevant documentation completely** - do not skim or read only first sections
4. **Create a Task Working File** using the template at `/guidelines/task-working-file-template.md`
   - Save as: `/work/YYYY-MM-DD-task-description.md` (e.g., `/work/2024-01-15-repository-manager-integration.md`)
   - Complete the Planning Checkpoint section before any implementation
   - Update throughout the task to track progress
   - This file serves as your external memory for the task

When coding, only use the methods and standards in the sip plugin suite documentation.  If there is cause to code using methods or standards that are not detailed in the documentation, stop what you are doing and explain the situation in chat so that the new approach can be discussed and validated before you implement it with explicit direction to do so.

If in the course of review or implementation you have ideas for additions or alternate approaches, stop what you're doing and mention them in a chat message so that we can discuss them, decide upon the best path forward and you can proceed with coding with explicit direction.

## CODE ANALYSIS REQUIREMENTS

If you are analyzing code in order to understand how it functions or to understand why a bug is occurring, please don't be satisfied basing your analysis and recommendation on what a superficial read of the immediate code suggests, what it seems like or what it "might" be; look at the actual code context when you have a theory and replace your speculation with a definitive understanding of the actual situation.  
 
Systematically follow through the whole code sequence in question from beginning to end without making any leaps in logic based on assumptions so that you understand the structure of the entire contextual framework before drilling into details speculatively.

BEFORE drawing conclusions from or modifying code:
REQUIRE verification = {
    data_structure: INSPECT actual runtime data,        
    css_classes: INSPECT actual DOM elements,
    field_names: MATCH exact property names,
    assumptions: COUNT must equal 0
}

IF assumption_needed THEN {
    STOP;
    ASK user for verification;
    WAIT for response;
}

═══════════════════════════════════════════════════════════════════════════════
                              WORKING PROCESS
═══════════════════════════════════════════════════════════════════════════════

## CRITICAL DIRECTIVES

Critical non-negotiable directive: No Task Agent Delegation

  When working with AI assistants on this codebase, the AI must handle all coding tasks directly without delegating to secondary agents or tools. This ensures:

  - Full conversation context is preserved
  - Project-specific requirements and nuances are maintained
  - Coding style and guidelines are consistently applied
  - Direct accountability for all code changes       

  Use file reading, editing, and searching tools directly rather than invoking any "Task" agents or similar delegation mechanisms.

## CODE QUALITY PRINCIPLES

Keep code simple, clean and straightforward. Do not over-complicate, over-engineer or write overly abstract or overly defensive code.

Do not take shortcuts to prioritize speed. Always prioritize being thorough, careful, doing the job right and working from definitive understanding instead of speculation.
 
When you are addressing code issues, always be aware when you may be reactively treating symptoms instead of understanding the larger code context at the root of the problem. Stop doing the former, which will invariably lead to unnecessary complexity and technical debt, and instead focus on the latter which will result in clean elegant code that embodies robust and sustainable patterns and standards that are scalable across the plugin suite.

Before writing any code, explain WHY the problem exists, then solve THAT problem. Code from first principles, not from pattern matched hacks.

## IMPLEMENTATION CHECKPOINT REQUIREMENTS

Before writing ANY code, you MUST complete this analysis:

  1. Root Cause Analysis (Required)

  Write out:
  - WHY does this problem exist? (Not what the       
  error is, but why it occurs)
  - What is the root cause? (The structural
  issue, not the symptom)
  - Which guideline section applies? (Reference      
  specific line numbers)

  2. Anti-Pattern Check (Required)

  If your solution involves ANY of these, STOP       
  and reconsider:
  - setTimeout / setInterval (timing
  workarounds) - See "Legitimate setTimeout Usage" below
  - try-catch blocks (for errors that shouldn't      
  exist)
  - Defensive checks (if exists, if defined,
  hasOwnProperty)
  - Event handler workarounds
  - State management to track framework behavior
  - inline css styles not being used legitimately for dynamic values.
  - Multiple redundant storage/recovery mechanisms ("belt and suspenders")

  These are symptom treatments. Return to root       
  cause analysis.

  3. Solution Validation (Required)

  Before implementing, state:
  - "I am about to use [specific
  pattern/approach]"
  - "This is/isn't symptom treatment because
  [specific reason]"
  - "This addresses the root cause by
  [explanation]"

  4. Common Patterns Reference

  - Symptom: setTimeout, defensive checks,
  workarounds
  - Root Cause: Configuration-based solutions,       
  proper event handling, correct API usage

  If you cannot clearly explain why your
  solution addresses the root cause rather than      
  the symptom, do not proceed with
  implementation.

## PATTERN IMPLEMENTATION VERIFICATION

When implementing ANY established pattern:

1. STATE YOUR INTENT
   - Before coding: "Implementing [pattern] following [document.md:section]"
   - Quote the exact implementation requirement from documentation
   - Code exactly as documented, no variations

2. COMMON COMPLIANCE FAILURES TO AVOID
   - Parameter naming variations (e.g., action_name vs action_type)
   - Hook timing differences from documented patterns  
   - Response format deviations from standard structures
   - JavaScript utility usage that bypasses documented methods

3. VERIFICATION CHECKPOINTS
   - After implementation, confirm it matches documentation exactly
   - Test that the pattern works as documented
   - If any deviations were necessary, explain why

If documentation is unclear or incomplete, STOP and request clarification rather than making assumptions about correct implementation.

### Specific Pattern Checkpoints

**AJAX IMPLEMENTATION:**
- Read sip-plugin-ajax.md completely before any AJAX work
- Verify parameter naming: $_POST[$action_type] matches JavaScript createFormData() second parameter
- Test AJAX call with browser dev tools before considering complete
- Check that response routing follows documented three-level structure

**DATATABLES IMPLEMENTATION:**
- Read sip-feature-datatables.md for table patterns
- Follow client-side processing standards
- Implement proper cleanup before destroy()

**UI COMPONENTS:**
- Read sip-feature-ui-components.md for UI patterns
- Use SiP.Core utilities for all UI operations
- Follow the three-layer visibility structure for tables

## WORKFLOW PRACTICES

When you are familiarizing yourself with code, read the code instead of searching for specific parts; understanding the full context that targetted searches may miss is critical.

When searching and replacing to update code, do not rely on your saved context for your search string; check the actual code to ensure your search string is accurate.

Never use write to file to make code updates.
 
Do not preserve legacy code.  Clean up all remnants of unused or deprecated code thoroughly.  Do not implement or ignore backward compatibility code. Backward combatibility is unnecessary complexity that creates confusion and masks errors that should be fixed.  If we're in transition, we don't handle that with backward compatibility code. We handle that by letting the code throw errors and using those errors as cues to get all the code up to the correct standard.

Do not create custom test tools or instructions unless explicitly asked to do so.  Testing will take place in the actual code.

## WORK COMPLETION REQUIREMENT

Before reporting that implementation is complete:
1. **Update the Task Working File** - Mark all completed items in the Work Checkpoint section
2. **Verify all planned tasks are complete** - Check that nothing was missed
3. **Run through the Standards Compliance Verification** checklist
4. **Report completion status** referencing the working file

═══════════════════════════════════════════════════════════════════════════════
                           SPECIFIC GUIDANCE
═══════════════════════════════════════════════════════════════════════════════

## SYMPTOM VS ROOT CAUSE DISTINCTION

Symptom vs. Root Cause: A Critical Distinction

  The Problem Pattern:
  When encountering an error, there are two paths:
  1. Symptom Treatment: Adding defensive code around the error point
  2. Root Cause Resolution: Understanding WHY the error occurs and fixing the underlying issue      

  Example of Symptom Treatment (WRONG):
  // Error: Call to undefined function sip_plugin_storage()
  // Symptom treatment: Add defensive check
  if (function_exists('sip_plugin_storage')) {
      sip_plugin_storage()->register_plugin(...);
  }
  This "fixes" the error but creates technical debt:
  - The defensive check will exist forever
  - Every usage requires this check
  - The real problem remains hidden
  - Code becomes cluttered with defensive patterns

  Example of Root Cause Resolution (CORRECT):
  // Error: Call to undefined function sip_plugin_storage()
  // Investigation: When is this code running vs. when is the function available?
  // Discovery: Running at plugin load, but function available at 'init'
  // Root cause fix: Align timing
  add_action('init', function() {
      sip_plugin_storage()->register_plugin(...);
  }, 5);
  This fixes the actual problem:
  - No defensive code needed
  - Clean, simple implementation
  - Problem solved permanently
  - Code expresses proper dependencies

  How to Identify You're Treating Symptoms

  Warning Signs:
  - Adding if (function_exists()), if (class_exists()), try/catch blocks reactively
  - Adding isset() checks for variables that "should" exist
  - Creating workarounds for "edge cases" that keep appearing
  - Defensive coding that protects against "what if" scenarios
  - Multiple layers of error handling for the same issue

  The Correct Approach:
  1. Ask "Why?" - Why is this function undefined? Why is this variable missing?
  2. Trace the Execution - When does my code run? When is the dependency available?
  3. Find the Mismatch - There's always a logical reason for the error
  4. Fix the Root Cause - Align timing, fix initialization order, correct dependencies

  Key Principle

  If you're adding defensive code to prevent an error, STOP.
  You're treating a symptom. Instead:
  - Understand the execution flow
  - Identify the timing/dependency mismatch
  - Fix the structural problem
  - The error should become impossible, not defended against

  Real-World Application

  In the WordPress plugin context:
  - Symptom: Function undefined errors → Adding function_exists() checks
  - Root Cause: Wrong hook timing → Move code to appropriate hook
  - Symptom: Missing array keys → Adding isset() checks everywhere
  - Root Cause: Incomplete initialization → Fix initialization logic
  - Symptom: Null object errors → Adding null checks before every usage
  - Root Cause: Object not created when expected → Fix creation timing

  The goal is code that CAN'T fail because it's structurally correct, not code that's defended against failure.

## LEGITIMATE setTimeout USAGE

When setTimeout IS Appropriate (Industry Standard Patterns)

  setTimeout is NOT always a symptom. There are legitimate, industry-standard uses where it's the correct solution:

  1. Browser Extension Content Script Announcement
  CORRECT USE:
  // Content scripts announcing to host page
  setTimeout(() => {
      window.postMessage({ type: 'EXTENSION_READY' }, '*');
  }, 100);
  
  WHY IT'S CORRECT:
  - Known browser behavior: content scripts inject asynchronously
  - Industry standard: Used by major extensions (Grammarly, 1Password, AdBlock)
  - Not masking an error: The timing variance is inherent to the platform
  - Simple and reliable: More complex solutions add unnecessary state management

  2. Yielding to Browser Event Loop
  CORRECT USE:
  // After DOM manipulation, let browser recalculate
  element.style.display = 'block';
  setTimeout(() => {
      element.classList.add('animate-in');
  }, 0);
  
  WHY IT'S CORRECT:
  - Forces style recalculation between property changes
  - Allows browser to process pending UI updates
  - Standard pattern for CSS transitions/animations

  3. Debouncing User Input
  CORRECT USE:
  let timeoutId;
  searchInput.addEventListener('input', (e) => {
      clearTimeout(timeoutId);
      timeoutId = setTimeout(() => {
          performSearch(e.target.value);
      }, 300);
  });
  
  WHY IT'S CORRECT:
  - Intentional delay to improve performance
  - Prevents excessive API calls
  - Standard UX pattern

  INCORRECT setTimeout Usage (Symptom Treatment)

  1. Waiting for Elements to Exist
  WRONG:
  setTimeout(() => {
      const button = document.getElementById('submit-button');
      button.addEventListener('click', handler);
  }, 1000);
  
  CORRECT:
  // Use proper lifecycle hooks or MutationObserver
  document.addEventListener('DOMContentLoaded', () => {
      const button = document.getElementById('submit-button');
      button.addEventListener('click', handler);
  });

  2. Waiting for Variables to Initialize
  WRONG:
  setTimeout(() => {
      if (window.myApp) {
          window.myApp.init();
      }
  }, 500);
  
  CORRECT:
  // Fix initialization order or use proper events
  window.addEventListener('myAppReady', () => {
      window.myApp.init();
  });

  3. Fixing Race Conditions
  WRONG:
  saveData();
  setTimeout(() => {
      loadData(); // Hope save is done...
  }, 200);
  
  CORRECT:
  // Use promises or callbacks
  saveData().then(() => {
      loadData();
  });

  Key Distinction:
  - LEGITIMATE: When delay is intentional for platform/UX reasons
  - SYMPTOM: When delay is hoping something else happens first

  Ask yourself: "Am I using setTimeout because I WANT a delay, or because I'm HOPING something 
  will be ready?" If it's hope, fix the root cause.

## MULTIPLE REDUNDANT STORAGE ("Belt and Suspenders")
  
The Problem Pattern:
Creating multiple ways to store/recover the same data "just in case" something fails.
  
  Example of Multiple Redundant Storage (WRONG):
  // Shop authorization - creating multiple recovery paths
  // PHP: Store in database
  update_option('shop_name', $shop_name);
  
  // JavaScript: Also store in localStorage "just in case"
  localStorage.setItem('shop_name', shopName);
  
  // PHP: Add fallback to re-fetch if missing
  if (empty($shop_name)) {
      $shop_name = fetch_shop_details($token)['shop_name'];
  }
  
  This creates technical debt:
  - Confusion about which source is authoritative
  - Sync issues between storage locations  
  - False sense of robustness
  - Hides the real bug (why is shop_name empty?)
  
  Example of Single Source of Truth (CORRECT):
  // PHP: Store once in the authoritative location
  update_option('shop_name', $shop_name);
  
  // JavaScript: Display what server returns
  if (response.data.shop_name) {
      $('.shop-name').text(response.data.shop_name);
  }
  
  // Trust that WordPress options work correctly
  // Fix any bugs at the source, not with recovery layers
  
  Key Principle:
  If you're creating multiple ways to recover the same data, STOP.
  You're treating a symptom. Instead:
  - Find out why the primary storage isn't working
  - Fix that root cause
  - Trust your data flow

═══════════════════════════════════════════════════════════════════════════════
                            REVIEWING PROCESS
═══════════════════════════════════════════════════════════════════════════════

## CODE REVIEW REQUIREMENTS

If you have implemented changes to the code, carefully review your changes and any code that may be affected by those changes to ensure that all code adheres to the prevailing sip plugin suite coding standard, and that there is no legacy code or remnants of deprecated code.

Would a seasoned senior enterprise developer approve of this clean, simple solution that makes the right thing automatic and the wrong thing difficult if not impossible?

## DOCUMENTATION UPDATE REQUIREMENTS

Upon completion, review the sip plugin suite documentation in the .claude folder and ensure that it is up to date, clear and complete and that it reflects both any changes or additions to code standards and addresses any issues that may have arisen in implementation from documentation clarity or organization.

If you are adding or supplementing documentation, please make sure that you are adding it correctly according to the pattern used to document other sip plugins, core features or development tools and methods and that it is correctly referenced and linked in all expected and useful contexts.

## COMMIT MESSAGE

Code changes do not need to be recorded in a file.  Please simply provide a brief summary of changes suitable to be included in the source control commit message.

## TASK COMPLETION AND ARCHIVAL

After review is complete:
1. **Update the Task Working File** with:
   - Review Checkpoint section completed
   - Documentation updates listed
   - Commit message added
2. **Move the working file** to `/work/archived_tasks/` folder
   - Keep the same filename for reference
   - This preserves task history and decisions made


═══════════════════════════════════════════════════════════════════════════════
                    ADDITIONAL GUIDANCE TO INCORPORATE
═══════════════════════════════════════════════════════════════════════════════

## CODE TRACING METHODOLOGY


 Please trace the logical sequence of events that the code follows incremental step by incremental logical step through all paths that extend from the user executing the Load Into Creation Table action in the template table in /plugins/sip-printify-manager/. Follow the logic making no leaps other than those explicitly described in the actual code all the way through to their conclusion when the events following the Load Into Creation Table action conclude. This is a complex multi-step process that spans nearly all the sip printify manager plugin files and all elements of the dashboard. The files that you must refer to will be in the /plugins/sip-printify-manager/ directory and may also be in the plugins/sip-plugins-core/ directory. I am asking you to follow the logic of the code uncompromisingly taking no leap that is not explicit in the actual code.

For each step in the process please add a single concise line to the audit file located at /plugins/.claude/audits/creation-table-load-execution-audit.md citing the step taken, the file and line number.

The purpose of this exercise is to have a complete and accurate accounting of the entire Load into Creation Table code sequence with NO assumptions so that we can assess it for whether it adheres to all platform standards, identify elements of the code that are not in use or not compliant with standards and remove them and update the documentation so that it clearly and completely documents all standards and patterns in a well-structured, accessible and intuitive manner according to the principles and documentation framework outlined in the /plugins/.claude/index.md file 

   TASK: Trace "Load Into Creation Table" execution path

  CONSTRAINTS: {
      assumptions_allowed: 0,
      file_scope: ["/plugins/sip-printify-manager/", "/plugins/sip-plugins-core/"],
      output_file: "/plugins/.claude/audits/creation-table-load-execution-audit.md"
  }

  AUDIT_FORMAT: {
      max_words_per_step: 10,
      template: "N. [action_verb] [what] (file.ext:line)",
      examples: [
          "47. Calls handleSubmit() (template-actions.js:236)",
          "48. Gets formData value (ajax.js:73)",
          "49. Validates nonce exists (handler.php:89)"
      ]
  }

  FOR each execution step DO {
      IF can_read_exact_code THEN {
          READ file at specific line;
          RECORD "Step N: [exact_code_action] (filename:line_number)";
          CONTINUE to next explicit code instruction;
      }
      ELSE IF cannot_find_next_step THEN {
          RECORD "Step N: BLOCKED - Cannot trace beyond [current_file:line] without opening
  [required_file]";
          STOP;
          REPORT: "Need to open [specific_file] to continue trace";
      }
      ELSE IF would_require_assumption THEN {
          RECORD "Step N: BLOCKED - Would require assumption about [specific_detail]";
          STOP;
          ASK: "Please clarify: [specific question]";
      }
  }

  FORBIDDEN_ACTIONS: {
      - Writing steps without reading actual code
      - Continuing past file boundaries without opening next file  
      - Assuming function behavior without reading function body
      - Guessing at WordPress core behavior
  }
