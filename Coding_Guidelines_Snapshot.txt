═══════════════════════════════════════════════════════════════════════════════
                        SIP DEVELOPMENT PROCEDURAL FRAMEWORK
═══════════════════════════════════════════════════════════════════════════════

This document defines the behavioral requirements for all development tasks.
Tasks follow a strict PLAN → WORK → REVIEW framework with iteration loops.

Note: Standard messages for each stage are maintained in Claude_Process_Message_Cribsheet.txt

## PROCESS FLOW

```mermaid
graph TD
    A[PLAN I: Requirements Analysis] --> B[PLAN II: Implementation Plan]
    B --> C{User Approval?}
    C -->|No| B
    C -->|Yes: "begin coding"| D[WORK I: Implementation]
    D --> E[User Review]
    E --> F{Issues Found?}
    F -->|No| G[REVIEW I: Documentation]
    F -->|Yes| H[PLAN III: Refinement Planning]
    H --> I[PLAN IV: Iteration Plan]
    I --> J{User Approval?}
    J -->|No| I
    J -->|Yes: "begin coding"| K[WORK II: Iterate]
    K --> E
    G --> L[User Commits Changes]
```

═══════════════════════════════════════════════════════════════════════════════
                                 PLAN STAGE
═══════════════════════════════════════════════════════════════════════════════

NO CODING until this stage is complete and you receive explicit instruction.

## PLAN I - REQUIREMENTS ANALYSIS

Ia. Read Documentation Files
    1. Read task request and if the user has referenced any uploaded images, review them in /mnt/c/Users/tdeme/Documents/VSCode_Images_Repo/
    2. Read this entire Coding_Guidelines_Snapshot.txt document
    3. Read index.md for documentation structure overview
    4. Identify guideline files relevant to the task from their descriptions in the idex.md file
    5. Read ALL relevant documentation completely (not skimmed)
    6. Respond in chat with the completed checklist and a summary of documents read
        □ Read Coding_Guidelines_Snapshot.txt entirely (list key principles found)
        □ Read index.md and all relevant documentation (list all guideline files found with your briefly summarized assessment of their relevance to the task)
        □ Read guidelines identified as relevant (summarize the main purpose of each in 1 line)

### Documentation Review Requirements
    - **Read COMPLETELY** - Do not skim or read only first sections
    - Identify patterns in code and relate to documentation
    - Note undocumented patterns in Questions section
    - Request clarification for unclear/incomplete documentation

⚠️ STOP: You MUST complete Plan Ia BEFORE any code search or file exploration ⚠️

    CRITICAL: If you search for code files before completing Plan Ia, you will:
    - Miss documented patterns and waste time rediscovering them
    - Propose solutions that violate established architecture
    - Require multiple iterations to fix preventable issues

Ib. Review Code Files
    1. Analyze existing code patterns and their documentation relationships
    2. Identify WHY the work is needed in the plugin context
    3. Respond in chat with the completed checklist and a summary of files read
        □ Analyzed existing code patterns
        □ Traced code sequences systematically without logical leaps
        □ Inspected actual runtime data, DOM elements, and property names where relevant

### Code Review Requirements
When analyzing code:
    - Replace speculation with definitive understanding
    - Systematically trace code sequences without logical leaps
    - Understand entire contextual framework before details

## PLAN II - IMPLEMENTATION PLAN
    1. Complete working-task-planning-template.md at:
    /mnt/c/Users/tdeme/Local Sites/faux-stained-glass-panes/app/public/wp-content/plugins/.claude/working-task-planning-template.md
    2. Post plan in chat for user collaboration
    3. Make zero assumptions - list all uncertainties in Questions section
    4. Wait for explicit instruction to begin coding
        □ Completed working-task-planning-template.md
        □ Identified architectural WHY
        □ Made zero assumptions
        □ All proposed changes follow documented patterns OR have explicit justification

═══════════════════════════════════════════════════════════════════════════════
                                 WORK STAGE
═══════════════════════════════════════════════════════════════════════════════

Begin ONLY after explicit user instruction: "begin coding" or similar.

## WORK I - IMPLEMENTATION

### AI Tool Guidelines
AI assistants must handle all coding tasks directly without delegating to secondary agents or tools. This ensures:
- Full conversation context is preserved
- Project-specific requirements maintained
- Coding style consistently applied
- Direct accountability for all changes

### Implementation Requirements
1. Use file tools directly (no Task agent delegation)
2. Verify search strings against actual code (not saved context)
3. Use Edit/MultiEdit for updates (never Write for existing files)
4. Stay within specified scope - no unauthorized changes
5. Follow documented patterns OR get explicit approval for deviations
6. Prioritize simple, scalable, release quality work over speed

### Scope Management
- Only implement changes in the working task file
- If new approach needed: STOP, explain in chat, await approval
- If issues/ideas discovered: STOP, mention in chat, await direction

## ITERATION LOOP

When user identifies issues:

### PLAN III - WORK REFINEMENT PLANNING
1. Collaborate on best method to address issues
2. Keep answers brief and practical for rapid communication
3. Stay within WORK DETAILS constraints

### PLAN IV - ITERATION PLAN SUMMARY  
1. Complete iteration planning template
2. Collaborate with user to refine plan
3. Wait for explicit instruction before coding

### WORK II - ITERATE
1. Implement iteration plan according to WORK principles
2. Review work against WORK DETAILS
3. Confirm completion in chat

→ Returns to User Review, repeating until complete

## VERIFICATION REQUIREMENT

Before ANY code modification:
```
REQUIRE verification = {
    data_structure: INSPECT actual runtime data,
    css_classes: INSPECT actual DOM elements,
    field_names: MATCH exact property names,
    assumptions: COUNT must equal 0
}

IF assumption_needed THEN {
    STOP;
    ASK user for verification;
    WAIT for response;
}
```

### Work Compliance Checklist
□ Used file reading/editing tools directly (no Task agent delegation)
□ Verified search strings against actual code (not saved context)
□ Used Edit/MultiEdit for code updates (never Write for existing files)
□ Stayed within specified scope of working task file
□ All implementations follow documented patterns OR have explicit approval
□ No defensive code added to prevent errors (fixed root causes instead)
□ No redundant storage mechanisms (single source of truth)
□ No setTimeout for waiting (only for intentional delays)
□ No try-catch for errors that shouldn't exist
□ No function_exists/class_exists/isset defensive checks
□ Made zero assumptions (verified all data structures and field names)
□ Code would pass senior developer review for simplicity and clarity
□ No backward compatibility code or legacy remnants preserved
□ All anti-patterns from CODE REVIEW CHECKLIST avoided

## CORE PRINCIPLES

### 1. FIX ROOT CAUSES, NOT SYMPTOMS

```mermaid
graph LR
    A[Error Occurs] --> B{Why?}
    B --> C[Trace Execution]
    C --> D[Find Timing/Dependency Mismatch]
    D --> E[Fix Structure]
    E --> F[Error Impossible]
    
    A -.-> G[Add Defensive Check]
    G -.-> H[Error Hidden]
    H -.-> I[Technical Debt]
    
    style G stroke:#ff0000,stroke-dasharray: 5 5
    style H stroke:#ff0000,stroke-dasharray: 5 5
    style I stroke:#ff0000,stroke-dasharray: 5 5
```

❌ WRONG - Symptom Treatment:
```php
if (function_exists('sip_plugin_storage')) {
    sip_plugin_storage()->register_plugin(...);
}
```

✅ CORRECT - Root Cause Fix:
```php
add_action('init', function() {
    sip_plugin_storage()->register_plugin(...);
}, 5);
```

**Warning Signs You're Treating Symptoms:**
- Adding reactive defensive checks
- Creating workarounds for recurring "edge cases"
- Multiple error handling layers for same issue
- Protecting against "what if" scenarios

### 2. SINGLE SOURCE OF TRUTH

❌ WRONG - Multiple Storage:
```javascript
// Store in multiple places "just in case"
localStorage.setItem('shop_name', shopName);
update_option('shop_name', $shop_name);
```

✅ CORRECT - Single Authority:
```php
update_option('shop_name', $shop_name);  // One source
```

### 3. LEGITIMATE setTimeout USAGE

Ask yourself: "Am I using setTimeout because I WANT a delay, or because I'm HOPING something will be ready?"

✅ CORRECT - Intentional Delay:
```javascript
// Browser extension announcement (industry standard)
setTimeout(() => {
    window.postMessage({ type: 'EXTENSION_READY' }, '*');
}, 100);

// Debouncing user input
let timeoutId;
searchInput.addEventListener('input', (e) => {
    clearTimeout(timeoutId);
    timeoutId = setTimeout(() => {
        performSearch(e.target.value);
    }, 300);
});
```

❌ WRONG - Hoping Something Happens:
```javascript
// Waiting for elements
setTimeout(() => {
    const button = document.getElementById('submit-button');
    button.addEventListener('click', handler);
}, 1000);

// Use proper lifecycle instead:
document.addEventListener('DOMContentLoaded', () => {
    const button = document.getElementById('submit-button');
    button.addEventListener('click', handler);
});
```

### 4. EFFICIENT STRING BUILDING

❌ WRONG - Concatenation in Loops:
```javascript
let html = '';
items.forEach(item => {
    html += '<div>' + item.name + '</div>';
});
```

```powershell
# PowerShell - Building incrementally
$content = ""
foreach ($item in $items) {
    $content += "Item: $($item.Name)`n"
    $content += "Value: $($item.Value)`n`n"
}
```

✅ CORRECT - Array Join:
```javascript
const sections = items.map(item => `<div>${item.name}</div>`);
const html = sections.join('');
```

```powershell
# PowerShell - Collect then join
$sections = @()
foreach ($item in $items) {
    $section = @"
Item: $($item.Name)
Value: $($item.Value)
"@
    $sections += $section
}
$content = $sections -join "`n"
```

## CODE REVIEW ANTI-PATTERNS

If your solution includes ANY of these, STOP and reconsider:

**❌ Timing & Defensive Patterns**
□ setTimeout/setInterval for waiting (vs. intentional delays)
□ try-catch blocks for errors that shouldn't exist
□ Defensive checks (function_exists, class_exists, isset, hasOwnProperty)
□ Event handler workarounds
□ State management to track framework behavior

**❌ UI & Storage Patterns**
□ Inline CSS styles (when not for dynamic values)
□ Multiple redundant storage/recovery mechanisms
□ Multiple truth sources for same data

**❌ Implementation Standards**
□ Parameter naming variations (e.g., action_name vs action_type)
□ Hook timing differences from documented patterns
□ Response format deviations from standard structures
□ JavaScript utility usage that bypasses documented methods

**📋 Pattern-Specific Checkpoints**
□ AJAX: Parameter naming matches between PHP/JS
□ DataTables: Proper cleanup before destroy()
□ UI Components: Using SiP.Core utilities

## CODE TRACING METHODOLOGY

When tracing code execution paths:

```
TASK: Trace execution path
CONSTRAINTS: {
    assumptions_allowed: 0,
    file_scope: [specified directories],
    output_file: [audit file path]
}

AUDIT_FORMAT: {
    max_words_per_step: 10,
    template: "N. [action_verb] [what] (file.ext:line)",
    examples: [
        "47. Calls handleSubmit() (template-actions.js:236)",
        "48. Gets formData value (ajax.js:73)",
        "49. Validates nonce exists (handler.php:89)"
    ]
}

FOR each execution step DO {
    IF can_read_exact_code THEN {
        READ file at specific line;
        RECORD exact code action;
        CONTINUE to next explicit instruction;
    }
    ELSE IF cannot_find_next_step THEN {
        STOP;
        REPORT: "Need to open [specific_file] to continue";
    }
    ELSE IF would_require_assumption THEN {
        STOP;
        ASK: "Please clarify: [specific question]";
    }
}
```

═══════════════════════════════════════════════════════════════════════════════
                                REVIEW STAGE
═══════════════════════════════════════════════════════════════════════════════

## REVIEW I - DOCUMENTATION

The documentation serves as a critical bridge between human and AI collaborators, preserving context that would otherwise be lost between sessions.

1. Re-read index.md at:
   /mnt/c/Users/tdeme/Local Sites/faux-stained-glass-panes/app/public/wp-content/plugins/.claude/index.md
2. Check /guidelines/ directory for affected documentation
3. Update to reflect current functionality (not past/future)
4. Document architectural WHY (not history)
5. Ensure single source of truth (each fact appears exactly once)

### When to Update Documentation
- Architectural changes that alter existing docs
- New coding patterns or conventions
- Changed development requirements
- Recurring issues needing specific handling

Do NOT update for:
- Routine code changes
- Bug fixes
- Implementation details not affecting structure

### Documentation Rules

1. **NO FUTURE OR HISTORY** - Current state only
   - No TODO lists, roadmaps, or plans in guidelines
   - No troubleshooting sections
2. **ARCHITECTURAL WHY** - Constraints that necessitate each component
3. **EXAMPLES OVER EXPLANATIONS** - Show, don't tell
4. **DIAGRAM BEFORE PROSE** - Visual first for complex flows
5. **CODE LIMITS** - Max 20 lines per example
   - Link to full code: `// Full code: path/to/file.js:42`
6. **SINGLE SOURCE OF TRUTH** - Each fact appears exactly once
   - Use anchors: `[See Debug Levels](#debug-levels)`
7. **STRUCTURED HIERARCHY** - Max 3 heading levels
8. **CONCISE HEADERS** - "Debug Configuration" not "How to Configure Debug"
9. **ACTIVE VOICE** - "The handler processes" not "is processed by"
10. **CONSISTENT TERMINOLOGY** - One term per concept throughout

### Documentation Compliance Checklist

**PREPARATION**
□ Re-read /mnt/c/Users/tdeme/Local Sites/faux-stained-glass-panes/app/public/wp-content/plugins/.claude/index.md
□ Identify which /guidelines/ files relate to your changes

**ACCURACY CHECK**
□ Documentation reflects current code functionality (not past or future state)
□ All code references use correct file paths and line numbers
□ Message types, handler names, and API calls match implementation
□ No orphaned documentation for removed features

**CLARITY CHECK**
□ Would a new developer understand the WHY behind each design decision?
□ Are complex flows explained with diagrams first, prose second?
□ Do code examples show the essential pattern in <20 lines?
□ Is each concept explained exactly once with cross-references elsewhere?

**CONSISTENCY CHECK**
□ Headers are concise and front-loaded (e.g., "Debug Configuration" not "How to Configure Debug")
□ Terminology is consistent throughout (picked one term per concept)
□ Documentation follows established SiP patterns for similar features
□ Maximum 3 heading levels (##, ###, ####)

**FINAL REVIEW**
□ No TODO lists, roadmaps, or troubleshooting sections
□ No duplication - used search to verify single source of truth
□ All cross-references work: `[See Section](#anchor)`
□ Documentation answers "why it exists" not "how we got here"

## COMMIT MESSAGE FORMAT

When complete, provide a commit message that:
□ Summarizes the functional change (not the documentation update)
□ Uses present tense ("Add" not "Added", "Fix" not "Fixed")
□ Keeps first line under 50 characters
□ Includes blank line before extended description (if needed)

Example:
```
Fix debug sync between WordPress and extension

Ensure debug level is included in every message from WordPress
to extension. Remove race conditions in initialization.
```

═══════════════════════════════════════════════════════════════════════════════
                              CRITICAL REMINDERS
═══════════════════════════════════════════════════════════════════════════════

1. **NO CODING** until explicitly instructed
2. **ZERO ASSUMPTIONS** - verify everything
3. **FIX ROOT CAUSES** not symptoms
4. **SINGLE SOURCE OF TRUTH** always
5. **STAY IN SCOPE** - no unauthorized changes
6. **DOCUMENT WHY** not what or how
7. **CODE MUST BE SIMPLE** enough for senior review
8. **NEVER USE Write** for existing files
9. **NO BACKWARD COMPATIBILITY** - let errors guide updates

When in doubt, STOP and ASK rather than assume.

**Remember:** The goal is code that CAN'T fail because it's structurally correct, not code that's defended against failure.