 Here is the message I will send at the beginning of a task that should lead to this documentation.

Before you begin, please review the documentation for the plugin suite at /plugins/.claude/index.md and be sure to look at /plugins/.claude/Coding_Guidelines_Snapshot.txt.  Then please look over the relevant code and then respond in the chat with a summary of the issue and any questions you may have. Once we've discussed the correct approach, I'll ask you to make the necessary updates adhering to the documented guidelines and standards.

 Here is the message that I will send at the end of a task to ensure we are following through correctly

 Great! Can you please look over the code that you just updated and make sure there are no remaining remnants of any deprecated solutions and no backward compatibility code or legacy code of any kind? Please don't simply search for strings to find deprecated code; read through the complete flow and context around the changes you made for deprecated remnants and search for any references to the deprecated code that may themselves need to be updated or deprecated.  

And can you please look over the documentation files to make sure that they are accurate and reflect the current functioning of the code? Start by reviewing /plugins/.claude/index.mdto refresh yourself with the overall structure and the principles behind it.  Then Please make sure to check on related documentation in the /guidelines/ directory to ensure that it links to the updated standards correctly where appropriate and doesn't retain any deprecated references.  If there were aspects of the code that were unclear to you as you worked, without straying into corner cases or one off issues, please update the documentation to reflect the patterns, principles and structures that were needed to correctly implement your solution.  
 
 -- PLANNING --

 Do not code without explicit direction to do so.  Do not make changes beyond those clearly stated in a request to change code made by the user.

 Images shared by the user will be uploaded here: /mnt/c/Users/tdeme/Documents/VSCode_Images_Repo/. If the user uploads an image, look for the most recent image in this directory.

 Before doing work, refer to the index.md file in the .claude folder and make sure that you are familiar with any relevant utilities and standards outlined in the documentation.

When coding, only use the methods and standards in the sip plugin suite documentation.  If there is cause to code using methods or standards that are not detailed in the documentatio, stop what you are doing and explain the situation in chat so that the new approach can be discussed and validated before you implement it with explicit direction to do so.

 If in the course of review or implementation you have ideas for additions or alternate approaches, stop what you're doing and mention them in a chat message so that we can discuss them, decide upon the best path forward and you can proceed with coding with explicit direction.

 If you are analyzing code in order to understand how it functions or to understand why a bug is occurring, please don't be satisfied basing your analysis and recommendation on what a superficial read of the immediate code suggests, what it seems like or what it "might" be; look at the actual code context when you have a theory and replace your speculation with a definitive understanding of the actual situation.  
 
 Systematically follow through the whole code sequence in question from beginning to end without making any leaps in logic based on assumptions so that you understand the structure of the entire contextual framework before drilling into details speculatively.

   BEFORE drawing conclusions from or modifying code:
  REQUIRE verification = {
      data_structure: INSPECT actual runtime data,        
      css_classes: INSPECT actual DOM elements,
      field_names: MATCH exact property names,
      assumptions: COUNT must equal 0
  }

  IF assumption_needed THEN {
      STOP;
      ASK user for verification;
      WAIT for response;
  }

 -- WORKING --
 Keep code simple, clean and straightforward. Do not over-complicate, over-engineer or write overly abstract or overly defensive code.

 Do not take shortcuts to prioritize speed. Always prioritize being thorough, careful, doing the job right and working from definitive understanding instead of speculation.
 
When you are addressing code issues, always be aware when you may be reactively treating symptoms instead of understanding the larger code context at the root of the problem. Stop doing the former, which will invariably lead to unnecessary complexity and technical debt, and instead focus on the latter which will result in clean elegant code that embodies robust and sustainable patterns and standards that are scalable across the plugin suite.

When you are familiarizing yourself with code, read the code instead of searching for specific parts; understanding the full context that targetted searches may miss is critical.

When searching and replacing to update code, do not rely on your saved context for your search string; check the actual code to ensure your search string is accurate.

Never use write to file to make code updates.
 
 Do not preserve legacy code.  Clean up all remnants of unused or deprecated code thoroughly.

 Do not create custom test tools or instructions.  Testing will take place in the actual code.

-- SYMPTOM VS ROOT CAUSE DISTINCTION --
  Symptom vs. Root Cause: A Critical Distinction

  The Problem Pattern:
  When encountering an error, there are two paths:
  1. Symptom Treatment: Adding defensive code around the error point
  2. Root Cause Resolution: Understanding WHY the error occurs and fixing the underlying issue      

  Example of Symptom Treatment (WRONG):
  // Error: Call to undefined function sip_plugin_storage()
  // Symptom treatment: Add defensive check
  if (function_exists('sip_plugin_storage')) {
      sip_plugin_storage()->register_plugin(...);
  }
  This "fixes" the error but creates technical debt:
  - The defensive check will exist forever
  - Every usage requires this check
  - The real problem remains hidden
  - Code becomes cluttered with defensive patterns

  Example of Root Cause Resolution (CORRECT):
  // Error: Call to undefined function sip_plugin_storage()
  // Investigation: When is this code running vs. when is the function available?
  // Discovery: Running at plugin load, but function available at 'init'
  // Root cause fix: Align timing
  add_action('init', function() {
      sip_plugin_storage()->register_plugin(...);
  }, 5);
  This fixes the actual problem:
  - No defensive code needed
  - Clean, simple implementation
  - Problem solved permanently
  - Code expresses proper dependencies

  How to Identify You're Treating Symptoms

  Warning Signs:
  - Adding if (function_exists()), if (class_exists()), try/catch blocks reactively
  - Adding isset() checks for variables that "should" exist
  - Creating workarounds for "edge cases" that keep appearing
  - Defensive coding that protects against "what if" scenarios
  - Multiple layers of error handling for the same issue

  The Correct Approach:
  1. Ask "Why?" - Why is this function undefined? Why is this variable missing?
  2. Trace the Execution - When does my code run? When is the dependency available?
  3. Find the Mismatch - There's always a logical reason for the error
  4. Fix the Root Cause - Align timing, fix initialization order, correct dependencies

  Key Principle

  If you're adding defensive code to prevent an error, STOP.
  You're treating a symptom. Instead:
  - Understand the execution flow
  - Identify the timing/dependency mismatch
  - Fix the structural problem
  - The error should become impossible, not defended against

  Real-World Application

  In the WordPress plugin context:
  - Symptom: Function undefined errors → Adding function_exists() checks
  - Root Cause: Wrong hook timing → Move code to appropriate hook
  - Symptom: Missing array keys → Adding isset() checks everywhere
  - Root Cause: Incomplete initialization → Fix initialization logic
  - Symptom: Null object errors → Adding null checks before every usage
  - Root Cause: Object not created when expected → Fix creation timing

  The goal is code that CAN'T fail because it's structurally correct, not code that's defended      
  against failure.

 
 -- REVIEWING --
 If you have implemented changes to the code, carefully review your changes and any code that may be affected by those changes to ensure that all code adheres to the prevailing sip plugin suite coding standard, and that there is no legacy code or remnants of deprecated code.

 Upon completion, review the sip plugin suite documentation in the .claude folder and ensure that it is up to date, clear and complete and that it reflects both any changes or additions to code standards and addresses any issues that may have arisen in implementation from documentation clarity or organization.

 > Please add this feature to the documentation. Please make sure that you aredding it correctly according to the        
  pattern used to document other sip plugins core features and that it is correctly referenced and linked in all        
  expected and useful contexts.

 Code changes do not need to be recorded in a file.  Please simply provide a brief summary of changes suitable to be included in the source control commit message.


 -----------

 Incorporate this into guidelnes...


 Please trace the logical sequence of events that the code follows incremental step by incremental logical step through all paths that extend from the user executing the Load Into Creation Table action in the template table in /plugins/sip-printify-manager/. Follow the logic making no leaps other than those explicitly described in the actual code all the way through to their conclusion when the events following the Load Into Creation Table action conclude. This is a complex multi-step process that spans nearly all the sip printify manager plugin files and all elements of the dashboard. The files that you must refer to will be in the /plugins/sip-printify-manager/ directory and may also be in the plugins/sip-plugins-core/ directory. I am asking you to follow the logic of the code uncompromisingly taking no leap that is not explicit in the actual code.

For each step in the process please add a single concise line to the audit file located at /plugins/.claude/audits/creation-table-load-execution-audit.md citing the step taken, the file and line number.

The purpose of this exercise is to have a complete and accurate accounting of the entire Load into Creation Table code sequence with NO assumptions so that we can assess it for whether it adheres to all platform standards, identify elements of the code that are not in use or not compliant with standards and remove them and update the documentation so that it clearly and completely documents all standards and patterns in a well-structured, accessible and intuitive manner according to the principles and documentation framework outlined in the /plugins/.claude/index.md file 

   TASK: Trace "Load Into Creation Table" execution path

  CONSTRAINTS: {
      assumptions_allowed: 0,
      file_scope: ["/plugins/sip-printify-manager/", "/plugins/sip-plugins-core/"],
      output_file: "/plugins/.claude/audits/creation-table-load-execution-audit.md"
  }

  AUDIT_FORMAT: {
      max_words_per_step: 10,
      template: "N. [action_verb] [what] (file.ext:line)",
      examples: [
          "47. Calls handleSubmit() (template-actions.js:236)",
          "48. Gets formData value (ajax.js:73)",
          "49. Validates nonce exists (handler.php:89)"
      ]
  }

  FOR each execution step DO {
      IF can_read_exact_code THEN {
          READ file at specific line;
          RECORD "Step N: [exact_code_action] (filename:line_number)";
          CONTINUE to next explicit code instruction;
      }
      ELSE IF cannot_find_next_step THEN {
          RECORD "Step N: BLOCKED - Cannot trace beyond [current_file:line] without opening
  [required_file]";
          STOP;
          REPORT: "Need to open [specific_file] to continue trace";
      }
      ELSE IF would_require_assumption THEN {
          RECORD "Step N: BLOCKED - Would require assumption about [specific_detail]";
          STOP;
          ASK: "Please clarify: [specific question]";
      }
  }

  FORBIDDEN_ACTIONS: {
      - Writing steps without reading actual code
      - Continuing past file boundaries without opening next file  
      - Assuming function behavior without reading function body
      - Guessing at WordPress core behavior
  }
